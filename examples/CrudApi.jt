@entity Produto {
    prop id: guid
    prop nome: string
    prop preco: decimal
    prop quantidade: int
    prop categoria: Categoria @manyToOne
}

@entity Categoria {
    prop id: guid
    prop nome: string
    prop produtos: List<Produto> @oneToMany
}

@dto ProdutoDTO {
    prop id: guid
    prop nome: string @required @min(3)
    prop preco: decimal @min(0)
    prop quantidade: int @min(0)
    prop categoriaId: guid @required
}

@dto CategoriaDTO {
    prop id: guid
    prop nome: string @required
}

@httpGet("/api/produtos")
fn GetProdutos() => List<ProdutoDTO> {
    return db.Produtos
        .Include(p => p.Categoria)
        .Select(p => new ProdutoDTO(p))
        .ToList()
}

@httpGet("/api/produtos/{id}")
fn GetProduto(guid id) => ProdutoDTO {
    var produto = db.Produtos
        .Include(p => p.Categoria)
        .FirstOrDefault(p => p.Id == id)
    
    if (produto == null) {
        throw new NotFoundException("Produto não encontrado")
    }
    
    return new ProdutoDTO(produto)
}

@httpPost("/api/produtos")
fn CreateProduto(ProdutoDTO produto) => ProdutoDTO {
    if (!produto.IsValid()) {
        throw new ValidationException("Dados inválidos")
    }
    
    var categoria = db.Categorias.Find(produto.CategoriaId)
    if (categoria == null) {
        throw new NotFoundException("Categoria não encontrada")
    }
    
    var novoProduto = new Produto {
        Nome = produto.Nome,
        Preco = produto.Preco,
        Quantidade = produto.Quantidade,
        Categoria = categoria
    }
    
    db.Produtos.Add(novoProduto)
    db.SaveChanges()
    
    return new ProdutoDTO(novoProduto)
}

@httpPut("/api/produtos/{id}")
fn UpdateProduto(guid id, ProdutoDTO produto) => ProdutoDTO {
    if (!produto.IsValid()) {
        throw new ValidationException("Dados inválidos")
    }
    
    var produtoExistente = db.Produtos.Find(id)
    if (produtoExistente == null) {
        throw new NotFoundException("Produto não encontrado")
    }
    
    var categoria = db.Categorias.Find(produto.CategoriaId)
    if (categoria == null) {
        throw new NotFoundException("Categoria não encontrada")
    }
    
    produtoExistente.Nome = produto.Nome
    produtoExistente.Preco = produto.Preco
    produtoExistente.Quantidade = produto.Quantidade
    produtoExistente.Categoria = categoria
    
    db.SaveChanges()
    
    return new ProdutoDTO(produtoExistente)
}

@httpDelete("/api/produtos/{id}")
fn DeleteProduto(guid id) {
    var produto = db.Produtos.Find(id)
    if (produto == null) {
        throw new NotFoundException("Produto não encontrado")
    }
    
    db.Produtos.Remove(produto)
    db.SaveChanges()
} 