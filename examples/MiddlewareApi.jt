import System
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.Http
import Microsoft.Extensions.Logging

module MiddlewareApi

    class ErrorResponse {
        prop string Message
        prop string StackTrace
        prop DateTime Timestamp
    }

    class RequestLoggingMiddleware {
        prop RequestDelegate Next
        prop ILogger<RequestLoggingMiddleware> Logger

        ctor(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger) {
            Next = next
            Logger = logger
        }

        fn InvokeAsync(HttpContext context) {
            var start = DateTime.Now
            Logger.LogInformation($"Requisição iniciada: {context.Request.Method} {context.Request.Path}")
            
            try {
                Next(context)
            }
            finally {
                var duration = DateTime.Now - start
                Logger.LogInformation($"Requisição finalizada: {context.Request.Method} {context.Request.Path} - {duration.TotalMilliseconds}ms")
            }
        }
    }

    class GlobalExceptionMiddleware {
        prop RequestDelegate Next
        prop ILogger<GlobalExceptionMiddleware> Logger

        ctor(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger) {
            Next = next
            Logger = logger
        }

        fn InvokeAsync(HttpContext context) {
            try {
                Next(context)
            }
            catch Exception ex {
                Logger.LogError(ex, "Erro não tratado")
                await HandleExceptionAsync(context, ex)
            }
        }

        fn HandleExceptionAsync(HttpContext context, Exception ex) {
            context.Response.ContentType = "application/json"
            context.Response.StatusCode = StatusCodes.Status500InternalServerError

            var response = new ErrorResponse {
                Message = ex.Message,
                StackTrace = ex.StackTrace,
                Timestamp = DateTime.Now
            }

            return context.Response.WriteAsJsonAsync(response)
        }
    }

    @api
    @route("api/test")
    class TestController : ControllerBase {
        prop ILogger<TestController> Logger

        ctor(ILogger<TestController> logger) {
            Logger = logger
        }

        @httpget("error")
        fn TriggerError() {
            throw new Exception("Erro de teste")
        }

        @httpget("performance")
        fn TestPerformance() {
            Thread.Sleep(100) // Simula processamento
            return Ok("Operação concluída")
        }
    }
} 